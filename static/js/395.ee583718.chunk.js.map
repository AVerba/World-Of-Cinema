{"version":3,"file":"static/js/395.ee583718.chunk.js","mappings":"+LACA,EAA2B,uB,kBCA3B,GAAgB,SAAW,2BAA2B,MAAQ,yB,SCGjDA,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjBC,EAAsCD,EAAtCC,GAAIC,EAAkCF,EAAlCE,KAAMC,EAA4BH,EAA5BG,UAAWC,EAAiBJ,EAAjBI,aAC7B,OACE,gBAAIC,UAAWC,EAAAA,SAAf,UACGF,GACC,gBACEC,UAAWC,EAAAA,MACXC,IAAG,yCAAoCH,GACvCI,IAAKN,KAGP,gBAAKG,UAAWC,EAAAA,MAAcC,I,69TAAcC,IAAKN,KAGnD,eAAIG,UAAWC,EAAAA,KAAf,SAA6BJ,KAC7B,cAAGG,UAAWC,EAAAA,UAAd,SAAiCH,MAZEF,I,oCCGnCQ,EACE,OADFA,EAEK,UAFLA,EAGM,WAHNA,EAIM,WAgDZ,EA7Ca,WACX,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAASD,GAArC,eAAOI,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACRC,EAAWH,KACV,CAACA,IACJ,IAAMG,EAAa,SAAAnB,GACjBa,EAAUL,GACVY,EAAAA,EAAAA,eACkBJ,GACfK,MAAK,YAAe,IAAZX,EAAW,EAAXA,KACPC,EAAQD,GACRG,EAAUL,MAEXc,OAAM,SAAAR,GACLC,EAASD,GACTD,EAAUL,OAGhB,OACE,gCACc,YAAXI,GAAuB,SAAC,IAAD,IAAkB,KAC9B,aAAXA,EAAwBW,EAAAA,OAAAA,QAAA,UAAkBT,EAAMU,UAAa,KAClD,aAAXZ,GACC,SAACa,EAAA,EAAD,WACE,eAAIrB,UAAWC,EAAf,SACGK,EAAKgB,OAAS,EACbhB,EAAKiB,KAAI,SAAA5B,GAAI,OAAI,SAACD,EAAD,CAAwBC,KAAMA,GAAfA,EAAKC,QAErC,gBAAKI,UAAU,YAAf,UACE,4DAKN","sources":["webpack://goit-react-hw-05-movies/./src/pages/Cast/Cast.module.css?cfbb","webpack://goit-react-hw-05-movies/./src/pages/Cast/CastItem/CastItem.module.css?72ab","pages/Cast/CastItem/CastItem.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"Cast_castList__DVXPY\"};","// extracted by mini-css-extract-plugin\nexport default {\"castItem\":\"CastItem_castItem__pKWwh\",\"photo\":\"CastItem_photo__q4Zdz\"};","import styles from './CastItem.module.css';\r\nimport propTypes from 'prop-types';\r\nimport NoPhoto from '../../../components/UI/NoPhoto.png';\r\n\r\nexport const CastItem = ({ item }) => {\r\n  const { id, name, character, profile_path } = item;\r\n  return (\r\n    <li className={styles.castItem} key={id}>\r\n      {profile_path ? (\r\n        <img\r\n          className={styles.photo}\r\n          src={`https://themoviedb.org/t/p/w185${profile_path}`}\r\n          alt={name}\r\n        />\r\n      ) : (\r\n        <img className={styles.photo} src={NoPhoto} alt={name} />\r\n      )}\r\n\r\n      <h3 className={styles.name}>{name}</h3>\r\n      <p className={styles.character}>{character}</p>\r\n    </li>\r\n  );\r\n};\r\n// CastItem.propTypes = {\r\n//   item: propTypes.objectOf(\r\n//     propTypes.shape({\r\n//       id: propTypes.number.isRequired,\r\n//       name: propTypes.string.isRequired,\r\n//       character: propTypes.string.isRequired,\r\n//       profile_path: propTypes.string.isRequired,\r\n//     })\r\n//   ),\r\n// };\r\n","import styles from './Cast.module.css';\nimport { useState, useEffect } from 'react';\nimport movieAPI from '../../services/serviceApi';\nimport { CastItem } from './CastItem';\nimport { Container } from '../../components/Container/Container';\nimport ImageLoader from '../../components/UI/Loader/Loader';\nimport { Notify } from 'notiflix';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState(Status.IDLE);\n  const [error, setError] = useState(null);\n  const { movieID } = useParams();\n\n  useEffect(() => {\n    searchCast(movieID);\n  }, [movieID]);\n  const searchCast = id => {\n    setStatus(Status.PENDING);\n    movieAPI\n      .fetchCastMovie(movieID)\n      .then(({ cast }) => {\n        setCast(cast);\n        setStatus(Status.RESOLVED);\n      })\n      .catch(error => {\n        setError(error);\n        setStatus(Status.REJECTED);\n      });\n  };\n  return (\n    <>\n      {status === 'pending' ? <ImageLoader /> : null}\n      {status === 'rejected' ? Notify.warning(`${error.message}`) : null}\n      {status === 'resolved' ? (\n        <Container>\n          <ul className={styles.castList}>\n            {cast.length > 0 ? (\n              cast.map(item => <CastItem key={item.id} item={item} />)\n            ) : (\n              <div className=\"noCredits\">\n                <p>Sorry no credits available</p>\n              </div>\n            )}\n          </ul>\n        </Container>\n      ) : null}\n    </>\n  );\n};\nCast.propTypes = {\n  id: propTypes.string.isRequired,\n};\nexport default Cast;\n"],"names":["CastItem","item","id","name","character","profile_path","className","styles","src","alt","Status","useState","cast","setCast","status","setStatus","error","setError","movieID","useParams","useEffect","searchCast","movieAPI","then","catch","Notify","message","Container","length","map"],"sourceRoot":""}